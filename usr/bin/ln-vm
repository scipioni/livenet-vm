#!/bin/bash

FLAG_DATE=/tmp/.flag_newer.$$

# good performance and safe on master
#CACHE=writeback

# max performance on master
CACHE=unsafe

# max performance on client
CACHE_CLIENT=unsafe

GUI=sdl
GUI_DELAY=10
CDROM=",file=/dev/cdrom"
FLOPPY=
# if empty recalculated below 
RAM=
CPU=kvm32
SMP=
VGA=qxl
GUEST_DISABLE=false
TABLET="-device usb-tablet,bus=usb-bus.0,port=1,id=tablet"
SPICE_PORT=5900
SEAMLESSMODE=false

# qemu
export QEMU_AUDIO_DRV=pa
#export QEMU_AUDIO_TIMER_PERIOD=0
KVM_SOUND="-soundhw hda"
MONITOR_PORT=4444

RDESKTOP_OPTS="-E -f -a 16 -u user -p user -r sound:local"
WIN_WIDTH=1024
WIN_HEIGHT=768

echo $name $master $local
DSK=$(readlink -f $local | cut -d "/" -f 3)

####################

# for keymap XKBLAYOUT
source /etc/default/keyboard

function do_help {
cat <<EOF

$0 [-h] [-r] [--sync /path/to/vm] [-g]

--help,-h: show this help

--sync,-s: sync from other vm
--commit,-c: commit
--rollback: rollback
--compact: compact image file
--pull: TODO get latest vm image for profile
--push: TODO push this vm to server
--force-sync: force sync of entire image of remote clients

--guest: run in readonly mode
--path: specify vm path. If not specified current dir is used.
--permissions: update for safer permissions on vm files

--xnest: before --read-only run client in xnest
--rdp: start vm in safe read only mode and run RDP client

--cdrom: path of iso
--floppy: path of floppy

--vgastd: use vga std driver instead of vmware
--client PID_VM: run RDP client 
--splash: show plymouth splash (called by --read-only mode)
--usbdevice <vendorID:productID>

--spice: run spice GUI
--sdl: run sdl GUI
--fullscreen: run client GUI in fullscreen mode

--check: show host RAM,CPU,...

Admin on master vm:
0) SO is in good state 
1) start new session or resuming existing session: $0 
2) ... make change to SO
3) optionally: roolback to good state at 0) with $0 --rollback
4) optionally: restart from 1)
5) commit changes: $0 --commit
6) optionally: force old slave to copy latest vm with $0 --force-sync

Admin on slave vm: 
1) update from master: $0 --sync /path/to/remote/vm

Admin local debug:
1) xnest with RDP read only mode: $0 --xnest --rdp

Student on slave vm:
1) safe read only mode: $0 --rdp

EOF
}

function on_finish() {
   rm -f ${FLAG_DATE}
}

trap on_finish EXIT
trap on_finish SIGINT

function gui_wait() {
    DELAY=$1
    for i in 1; do
       sleep $DELAY
       echo $i
    done | zenity --progress --pulsate --no-cancel --auto-close --width 400 --title "Macchina Virtuale" --text "Attendere ..." &
}

function gui_start() {
    [ -n "${DISPLAY}" ] || return
    mkfifo /tmp/$$
    zenity --progress --pulsate --no-cancel --width=400 --title="$1" < /tmp/$$ &
    exec 5>/tmp/$$
}

function gui_log() {
    echo $1
    [ -n "${DISPLAY}" ] || return
    echo "# "$1 >&5
}

function gui_step() {
    [ -n "${DISPLAY}" ] || return
    echo $1 >&5
}

function gui_stop() {
    [ -n "${DISPLAY}" ] || return
    echo 100 >&5
    exec 5>&-
    wait
}

function update_vm_date() {
    [ -f ${VM_IMG} ] || return

    TSTAMP=$(stat -c "%Y" ${VM_IMG})
    TSTAMP=$(( $TSTAMP + 2 )) # soglia necessaria
    VM_DATE=$( date +"%Y%m%d%H%M.%S" --date='@'${TSTAMP} )
    umask 0002
    touch ${FLAG_DATE} -t ${VM_DATE}
}


function set_params_kvm() {
#    VM_IMG=${CURRENT}/vm.img
 #   SESSION_IMG=${CURRENT}/.session.img
    VM_IMG=
    SESSION_IMG=
    VM_OPTIONS=""
    #update_vm_date
}

function set_params() {
    [ -n "${CURRENT}" ] || CURRENT=$(pwd)
    if [ -f ${CURRENT}/vm.vbox ]; then
        VM_TYPE=vbox
    else
        VM_TYPE=kvm
    fi
    if [ -f ${CURRENT}/.setup ]; then
        . ${CURRENT}/.setup
    else
        [ -f ${CURRENT}/.config ] && . ${CURRENT}/.config
    fi
    DIRTY_FLAG=${CURRENT}/.dirty
    set_params_${VM_TYPE}
}

function begin_long_operation() {
    touch ${DIRTY_FLAG}
}

function end_long_operation() {
    rm -f ${DIRTY_FLAG}
}

function do_force_sync() {
    FLAG=${CURRENT}/sessions/$(date +"%Y%m%d%H%M.%S").update
    echo "Force update ${FLAG}"
    touch ${FLAG}
    touch ${VM_IMG} -r ${FLAG}
}

function do_compact_kvm() {
    gui_log "Compact kvm from: "$( du -h ${VM_IMG} )
    qemu-img convert -p -O qed -o cluster_size=65536 ${VM_IMG} ${VM_IMG}.tmp
    if [ $? = 0 ]; then
        mv ${VM_IMG}.tmp ${VM_IMG}
        gui_log "Final size: "$( du -h ${VM_IMG} )
    fi
}


function do_commit_kvm() {
    VM=$1
    echo -n "Commit ..."
    #if [ ! -f ${SESSION_IMG} ]; then
    #    echo "nothing to do"
    #    return 0
    #fi

    SESSION_DATE=$(date +"%Y%m%d%H%M.%S")
    echo "create snapshot $SESSION_DATE of $VM"
    zfs snapshot rpool/vms/$VM@$SESSION_DATE
    echo "zfs snapshot rpool/vms/$VM@$SESSION_DATE"



}


    

#function do_subcommit_kvm() {
#    qemu-img rebase -u -b ${VM_IMG} ${SESSION_IMG}
#    nice qemu-img commit ${SESSION_IMG}
#    RESULT=$?
#    rm -f ${SESSION_IMG}
#    touch ${VM_IMG} -t ${SESSION_DATE}
#    return ${RESULT}
#}



function do_sync() {
    VM_MAIN=${1%/}


    if [ ! -d ${VM_MAIN} ]; then
        echo "ERROR: no ${VM_MAIN} dir present"
        exit 1
    fi

    # custom vms (no ln-vm skel)
    if [ ! -f ${VM_MAIN}/.config ] && [ ! -f ${VM_MAIN}/.setup ]; then
	rsync -av ${VM_MAIN}/ ${CURRENT}/
	return 10
    fi

    update_vm_date
    do_rollback_${VM_TYPE}
    echo

    ## restore image if not present
    if [ -f ${DIRTY_FLAG} ] || [ ! -f ${VM_IMG} ]; then
        echo -n "Dirty image, restore from ${VM_MAIN} ..."
        do_copy ${VM_MAIN}
        echo "OK"
        return 10 # no execute code below
    fi

    ## update image if force 
    for upd in $( find ${VM_MAIN}/sessions -newer ${FLAG_DATE} -name "*.update" -type f | sort -r ); do
        echo -n "Forced update ${upd} ..."
        do_copy ${VM_MAIN}
        echo "OK"
        return 10 # no execute code below
    done

    if [ "${VM_TYPE}" = "vbox" ]; then
        SESSION_IMG=${CURRENT}/session.img
    fi
    for sess in $( find ${VM_MAIN}/sessions -newer ${FLAG_DATE} -name "*img.gz" -type f | sort ); do
        echo -n "detected new session: " $( du -h ${sess} ) " "
        nice pigz -d < ${sess} > ${SESSION_IMG}
        SESSION_DATE=$( basename ${sess/.img.gz} )
        if [ $? = 0 ]; then
            echo -n " commit... "
            do_subcommit_${VM_TYPE}
            RESULT=$?
            return $RESULT
        else 
            return 1 # error
        fi
    done
    
    for sess in $( find ${VM_MAIN} -newer ${CURRENT}/.config -name ".config" -type f ); do
        echo "update .config"
        cp -rup ${VM_MAIN}/.config ${CURRENT} 
    done
    for sess in $( find ${VM_MAIN} -newer ${CURRENT}/.setup -name ".setup" -type f ); do
        echo "update .setup"
        cp -rup ${VM_MAIN}/.setup ${CURRENT} 
    done
    return 10 # no more updates
}

function do_rollback() {
    echo -n "Rollback kvm ..."
    LAST_SNAP=$(zfs list -t snapshot -o name | grep vm | tail -1)
    zfs rollback ${LAST_SNAP}
}

function do_client_call() {
    PID_VM=$1
    ( sleep 2 && $0 ${XNEST} --path "${CURRENT}" --client ${PID_VM} ) &
}

function do_shutdown() {
    PID_VM=$1
    nc localhost ${MONITOR_PORT} -w1 > /dev/null <<EOF
system_powerdown

EOF
    echo -n "Shutdown "
    SEC=0
    while [ 1 ]; do
        SEC=$((SEC+1))
        echo -n "."
        ps -p ${PID_VM} >/dev/null
        [ $? = 1 ] && break 
        
        [ $SEC -gt 12 ] && ( echo -n " kill forced "; kill -9 ${PID_VM} > /dev/null 2>&1 )
        sleep 1
    done
    echo "OK"
    if [ -n "${XNEST}" ]; then
        kill ${XNEST} > /dev/null 2>&1
    fi
}

function do_client() {
    PID_VM=$1
    echo "PID_VM=${PID_VM}"
    if [ -f ${CURRENT}/.setup ]; then
        . ${CURRENT}/.setup
    else
        [ -f ${CURRENT}/.config ] && . ${CURRENT}/.config
    fi

    if [ -n "${XNEST}" ]; then
        Xnest :1 -ac > /dev/null 2>&1 &
        XNEST=$!
        export DISPLAY=:1
        sleep 1
        xsetbg -onroot -fullscreen -fit -fork -border black /usr/share/backgrounds/*.png
        $0 --splash 50 &
    fi
    echo "Sleeping to wait RDP"
    sleep 1

    ncheck=0
    while [ 1 ]; do
        ncheck=$((ncheck+1))
        sleep 5
        echo -n "Running rdesktop..."
        rdesktop ${RDESKTOP_OPTS} localhost >/dev/null 2>/dev/null
        exit_code=$?
        echo "n=${ncheck}, EXIT CODE RDESKTOP:${exit_code}"
        [ $ncheck -gt 10 ] && break # too time, rdesktop cannot connect
        [ ${exit_code} = 71 ] && continue # this is error for timeout connection
        [ ${exit_code} = 76 ] && continue # this is error for timeout connection
        break
    done
    if [ -n "${PID_VM}" ]; then
        sleep 3
        do_shutdown ${PID_VM}
    fi
}

function do_splash() {
    DURATION=$1
 
    sudo plymouth quit
    MODE=boot
    #MODE="shutdown --debug-file=/tmp/p.log --debug"
    sudo plymouthd --mode=${MODE}
    sudo plymouth --show-splash
    I=0
    while [ 1 ]; do 
        sudo plymouth --update=test$I
        sleep 1
        I=$(($I+1))
        [ $I -ge $DURATION ] && break
    done
    sudo plymouth quit
}

function do_check() {
    grep -q 'svm\|vmx' /proc/cpuinfo
    if [ $? = 0 ]; then
        echo "Virtualization detected"
    else
        echo "WARNING: no virtualization detected"
    fi
    echo "RAM="$( sed -n "s|^MemTotal:\s*\([0-9]*\).*$|\1|p"  /proc/meminfo )
    echo "CPU="$( egrep "^processor" /proc/cpuinfo | wc -l )
}

function do_permissions() {
    chown -R livenet:kvm ${CURRENT} 2>/dev/null
    chmod -R g-w+r ${CURRENT} 2>/dev/null
    chmod g+w ${CURRENT} 2>/dev/null
}

function export_share() {
    echo "Found SHARE2=${SHARE2}"
    PID=$1
    SHARE_=$2

    SAMBACONF=/tmp/qemu-smb.${PID}-0/smb.conf
    NAME=$(basename ${SHARE_})
    USER=$(whoami)

    if [ ! -f ${SAMBACONF} ]; then
        echo "ERROR, no ${SAMBACONF} found"
    else

    cat >> ${SAMBACONF} <<EOF
[${NAME}]
path=${SHARE_}
read only=no
guest ok=yes
force user=${USER}

EOF
    fi


}

function audio_on() {
    set +e
    amixer sset 'Channel Mode' 2ch
    amixer sset Master 100% on
    amixer sset PCM 100% on
    amixer sset Headphone 100% on
    amixer sset Front 100% on
    pacmd set-sink-mute 0 false
    pacmd set-sink-volume 0 0x10000
    set -e
}

function do_wait_kill() {
FILE=$HOME/flag_shutdown
PID_KVM=$(pgrep -l kvm | cut -d "/"  -f 2)

while [ 1 ]
do
if [ -f $FILE ]
then
	kill -9 $PID_KVM
	echo "vm uccisa $PID_KVM" >> /tmp/test
        sleep 2
	rm $FILE
	exit 0

else
	sleep 2
fi
done


}


function do_start_kvm() {
    do_rollback
    if [ ! -f ${VM_IMG} ]; then
        echo "ERROR: no ${VM_IMG}"
        exit 1
    fi
    
    if [ -f ${DIRTY_FLAG} ]; then
        echo "ERROR: dirty ${VM_IMG}"
        exit 1
    fi

    if [ ! -f ${SESSION_IMG} ]; then
        echo -n "Starting new kvm session ..."
        qemu-img create -f qed -o cluster_size=8192 -b ${VM_IMG} ${SESSION_IMG} >/dev/null
        chmod g+w ${SESSION_IMG}
        echo "OK"
    else
        echo "Resume session"
    fi

    # half +1
    [ -n "${SMP}" ] || SMP=$(( 1+$( egrep "^processor" /proc/cpuinfo | wc -l )/2 ))

    # calculate half RAM
    if [ -z "${RAM}" ]; then
        RAM=$(( $( sed -n "s|^MemTotal:\s*\([0-9]*\).*$|\1|p"  /proc/meminfo )/1024/2 ))
        if [ ${RAM} -gt 2047 ]; then
            RAM=2047
        fi
    fi

    KVM_OPTIONS=""
    SHARE=${HOME}
    if [ -f ${CURRENT}/.setup ]; then
        . ${CURRENT}/.setup
    else
        [ -f ${CURRENT}/.config ] && . ${CURRENT}/.config
    fi

    i=1
    KVM_DISKS=""
    for vm_disk in $(ls ${CURRENT}/vm*.img); do
        [ -f ${vm_disk} ] || continue
        KVM_DISKS="${KVM_DISKS} -drive file=${vm_disk},if=none,id=virtio-disk${i},format=raw,cache=writeback,werror=ignore,rerror=ignore -device virtio-blk-pci,scsi=off,drive=virtio-disk${i},id=disk${i}"
        KVM_DISKS_LOG=" ${vm_disk}"
        i=$(($i+1))
    done

    if [ -f ${CURRENT}/.ich9-ehci-uhci.cfg ]; then
        USB2="-readconfig ${CURRENT}/.ich9-ehci-uhci.cfg"
    fi

    
    if [ "${GUI}" = "spice" ]; then
        GUIOPTS="-spice port=${SPICE_PORT},disable-ticketing,image-compression=off,jpeg-wan-compression=never,zlib-glz-wan-compression=never,playback-compression=off -global qxl-vga.vram_size=67108864 -device virtio-serial-pci -device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0 -chardev spicevmc,id=spicechannel0,name=vdagent"
        VGA=qxl
    fi
        
    if [ "${GUI}" = "sdl" ] && [ "${FULLSCREEN}" = "true" ]; then
        VM_OPTIONS="${VM_OPTIONS} -sdl -full-screen -no-frame -no-quit"
    fi
    if [ "${GUI}" = "headless" ]; then
        VM_OPTIONS="${VM_OPTIONS} -vnc :9"
        gui_wait ${GUI_DELAY} &
    fi
    
    # if pulseaudio is running with another user reinitialize it
    _PULSEUSER=$(ps -C pulseaudio -o user=)
    if [ -n "${_PULSEUSER}" ] && [ "${_PULSEUSER}" != "$(whoami)" ]; then
        echo "Restarting pulseaudio"
        sudo killall pulseaudio
    fi
    audio_on

    echo "Starting kvm with RAM=${RAM}MB, CPU=${SMP}, SOUND=${KVM_SOUND} DISKS='vm.img${KVM_DISKS_LOG}' GUI=${GUI} SHARE=${SHARE}"
    #ln-network
    #TODO improve
    #ln-vm --rollback
#    HDD=/dev/zvol/zfs-pool/kvm/win10
     HDD=/dev/$DSK
#${KVM_DISKS} \
    kvm \
        -name vm \
        -usb ${USB2} ${TABLET} \
        -machine pc,accel=kvm:tcg \
        -m ${RAM} \
        -cpu host,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time \
        -nodefaults -rtc base=localtime \
        -drive file=$HDD,if=virtio,index=0,cache=none\
        -vga ${VGA} \
        -k ${XKBLAYOUT:=it} \
        -monitor tcp:127.0.0.1:4444,server,nowait \
        -boot d \
        ${GUIOPTS} \
        ${KVM_SOUND} \
        ${USBDEVICES} \
        ${KVM_OPTIONS} \
        -netdev user,id=hostnet0,smb=${SHARE} -device virtio-net-pci,netdev=hostnet0,id=net0,mac=52:54:00:fe:e2:63,romfile= \
        ${VM_OPTIONS} &
    PID_VM=$!

    check.sh &
    P1=$! 
#    echo "PID of VM:${PID_VM}"
    if [ -n "${SHARE2}" ] && [ -d ${SHARE2} ]; then
        ( sleep 2 && export_share ${PID_VM} ${SHARE2} ) &
    fi

    if [ "${GUI}" = "spice" ]; then
        OPTS=""
        [ "${FULLSCREEN}" = "true" ] && OPTS="${OPTS} --full-screen=auto-conf"
        gui_wait ${GUI_DELAY}
        ( sleep ${GUI_DELAY} && spicy -h localhost -p ${SPICE_PORT} ${OPTS} ; do_shutdown ${PID_VM} ) &
    fi

#    do_wait_kill


    if [ -n "${CLIENT_CALL}" ]; then
        do_client_call ${PID_VM}
    else
        echo
        #( sleep 1 && [ -x /usr/bin/xdotool ] && xdotool search --name QEMU windowsize %@  ${WIN_WIDTH} ${WIN_HEIGHT} ) &
        #( sleep 10 && ( echo "sendkeys ctrl-alt-u" | nc localhost ${MONITOR_PORT} -w1 ) ) &
    fi

    wait ${PID_VM} ${P1}


}





PROGNAME=${0##*/}
PROGVERSION=0.1.0
SHORTOPTS="hs:cr"
LONGOPTS="help,sync:,compact,force-sync,rollback,commit,xnest,rdp,cdrom:,floppy:,vgastd,client:,check,splash:,usbdevice:,fullscreen,guest,path:,qed:,permissions,spice,sdl,seamless,headless"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
if [ $? -ne 0 ]; then
    # bad argument
    exit 1
fi
eval set -- "$ARGS"

set_params
while true; do
   case $1 in
    -h|--help)
        #do_help
        echo $PID_VM
        exit 0
        ;;
    -s|--sync)
        gui_start
        shift
        MASTER_ARG=$1
        if [ "auto" != "${MASTER_ARG}" ]; then
            MASTER=${MASTER_ARG}
        fi
        gui_log "Syncing from ${MASTER}"
        while [ 1 ]; do
            do_sync ${MASTER}
            if [ $? != 0 ]; then
                break
            fi
        done
        rm -f ${FLAG_DATE}
        rm -f ${SESSION_IMG}
        #grep -q "^MASTER=" ${CURRENT}/.config || echo "MASTER=${MASTER}" >> ${CURRENT}/.config
        grep -q "^MASTER=" ${CURRENT}/.setup || echo "MASTER=${MASTER}" >> ${CURRENT}/.setup
        do_permissions
        gui_stop
        exit 0
        ;;
    --compact)
        gui_start compact
        do_compact_${VM_TYPE}
        gui_stop
        exit 0
        ;;
    --check)
        do_check
        exit 0
        ;;
    --force-sync)
        do_force_sync
        exit 0
        ;;
    --rollback)
        #gui_start
        do_rollback
      #  gui_log "roolback"
        #gui_stop
        exit 0
        ;;
    --commit)
        shift
        shift
	NAME=$1
       # gui_start "commit"
        do_commit_kvm $NAME
        #gui_stop
        exit 0
        ;;
    --permissions)
        do_permissions
        exit 0
        ;;
    --xnest)
        XNEST=--xnest
        ;;
    --rdp|-r)
        do_rollback_${VM_TYPE}
        CLIENT_CALL=true
        VM_OPTIONS="${VM_OPTIONS} -vnc :9"
        CACHE=${CACHE_CLIENT}
        ;;
    --fullscreen)
        FULLSCREEN=true
        VM_OPTIONS_VBOX="${VM_OPTIONS_VBOX} -nograbonclick -nohostkey -nofstoggle -fullscreen"
        ;;
    --guest)
        if [ ! "${GUEST_DISABLE}" = "yes" ]; then
            do_rollback_${VM_TYPE}
            CACHE=${CACHE_CLIENT}
        fi
        ;;
    --cdrom)
        shift
        CDROM=",file="$1
        ;;
    --floppy)
        shift
        FLOPPY="-fda "$1
        ;;
    --client)
        shift
        PID_VM=$1
        do_client ${PID_VM}
        exit 0
        ;;
    --splash)
        shift
        DURATION=$1
        do_splash ${DURATION:=5}
        exit 0
        ;;
    --vgastd)
        VGA=std
        ;;
    --spice)
        GUI=spice
        ;;
    --headless)
        GUI=headless
        ;;
    --sdl)
        GUI=sdl
        ;;
    --usbdevice)
        shift
        USBDEVICES="${USBDEVICES} -usbdevice host:${1}"
        ;;
    --seamless)
        SEAMLESSMODE=true
        ;;
    --path)
        shift
        set -x
        CURRENT=$1
        [ -d ${CURRENT} ] || CURRENT=$(dirname ${CURRENT})
        set_params
        ;;
    *)
        shift
        break
        ;;
   esac
   shift


done
do_start_kvm

exit 0