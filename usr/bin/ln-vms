#!/bin/bash

# In this script you can find a set of utilities fo ln-vm.
# Get update for all vms
# Get vm for all section defined in vms.conf

#the name of vm launcher
vmlauncher=ln-vm

#define in livenet.conf the path of server sharing
. /etc/livenet/livenet.conf

function do_help {
cat <<EOF

$0 [-h] [-r] [--sync /path/to/vm] [-g]

--help,-h: help
--list: list vm
--vm <vm> [--xsession] [--run | --guest | --rdp]
EOF
}

# all vms need some variables: name [STRING], master [PATH], update [BOOLEAN] and local [PATH]
# for every section defined in vms.conf, initialize the variables with function do_parse
# every section need a name between square []

#if there are some vms for livenet image download and install
set -x
function do_parse() {
    SECTION=$1
    unset name master update local
    eval $( sed -e 's/[[:space:]]*\=[[:space:]]*/=/g' \
        -e 's/;.*$//' \
        -e 's/[[:space:]]*$//' \
        -e 's/^[[:space:]]*//' \
        -e "s/^\(.*\)=\([^\"']*\)$/\1=\"\2\"/" \
       < $CONFIG_FILE \
        | sed -n -e "/^\[$SECTION\]/,/^\s*\[/{/^[^;].*\=.*/p;}" )
    dsks=$(echo ${dsks:1:-1} )
}

# get all update for every VM 
function do_sync() {
    SECTIONS=$( sed -n -e "s/^\[\(\w\+\)\].*/\1/p" < ${CONFIG_FILE} )
    for SECTION in ${SECTIONS}; do
        do_parse ${SECTION}
        [ "${update}" = "true" ] || continue
        [ -n "${local}" ] || continue

        if [ -n "${master}" ] && [ -d ${master} ]; then
            mkdir -p /mnt/vms
            mount -t nfs ${LIVENET_ROOT}:/livenet/vms /mnt/vms
            losetup /dev/loop0 /mnt/vms/${name}/dsks/
            mkdir -p ${local}
            cd ${local}
            LIVENET_ROOT
            nice ln-vm --sync ${master}
        fi
    done
}

function do_list() {
    SECTIONS=$( sed -n -e "s/^\[\(\w\+\)\].*/\1/p" < ${CONFIG_FILE} )
    for SECTION in ${SECTIONS}; do
        echo "[${SECTION}]"
        do_parse ${SECTION}
        echo "  name=${name} master=${master} local=${local} update=${update}"  
    done
}

#download all updates
function do_run() {
    options="$*"
    do_parse $name
    echo "running $name $master $dsks"
    export dsks
    export master
    export name
    if [ -z "${dsks}" ]; then
        echo "ERROR: no disk $local or remote disk ${master} found"
    fi 
    ${vmlauncher} ${options}
}

PROGNAME=${0##*/}
PROGVERSION=0.1.0
SHORTOPTS="h"
LONGOPTS="help,list,vm:,run,guest,xsession,sync,rdp,headless"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
if [ $? -ne 0 ]; then
    # bad argument
    exit 1
fi
eval set -- "$ARGS"

while true; do
   case $1 in
    -h|--help)
        do_help
        exit 0
        ;;
    --list)
        do_list
        exit 0
        ;;
    --sync)
       touch ${FLAGLONGOP}
        ( do_sync ; rm -f ${FLAGLONGOP} ) &
        sleep 5

        # long sync, switch to session-wait
        if [ -f ${FLAGLONGOP} ]; then
            update-alternatives --set lightdm.conf /etc/lightdm/lightdm.conf.nfs.special
            service lightdm restart

            while [ 1 ]; do
                sleep 5
                [ -f ${FLAG} ] && continue # until sync running

                # activate normal login
                do_update_alternatives /etc/lightdm/lightdm.conf
                service lightdm restart
                break
            done
        fi
        exit 0
        ;;
    --vm)
        shift
        name=$1
        ;;
    --run)
        [ -n "${name}" ] || break
        do_parse "${name}"
        ;;
    --guest)
        [ -n "${name}" ] || break
        do_parse "${name}"
        OPTIONS="${OPTIONS} --fullscreen --guest --spice"
        XSESSION=true
        ;;
    --headless)
        [ -n "${name}" ] || break
        do_parse "${name}"
        OPTIONS="${OPTIONS} --guest --headless"
        XSESSION=false
        ;;
    --rdp)
        [ -n "${name}" ] || break
        do_parse "${name}"
        OPTIONS="${OPTIONS} --rdp"
        RDP=true
        ;;
    --xsession)
        XSESSION=true
        ;;
    *)
        shift
        break
        ;;
   esac
   shift
done
    

if [ -n "${XSESSION}" ]; then
    ratpoison -f /etc/ratpoisonrc &
    wmpid=$!
    if [ -n "${RDP}" ]; then
        do_setbg
        for i in $( seq 10 10 100 ); do
            sleep 2
            echo $i
        done | zenity --progress --no-cancel --auto-close --width 400 --text "Attendere ..." &
    fi

    ( do_run ${OPTIONS} ; killall ratpoison ) &
    wait $wmpid # wait until ratpoison is closed after do_run
else
    do_run ${OPTIONS}
fi
